/*
 * This file is part of PCAPdroid.
 *
 * PCAPdroid is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PCAPdroid is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PCAPdroid.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2020-21 - Emanuele Faranda
 */

package com.emanuelef.remote_capture.fragments;

import android.content.Context;
import android.content.res.Resources;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.emanuelef.remote_capture.CaptureService;
import com.emanuelef.remote_capture.ConnectionsRegister;
import com.emanuelef.remote_capture.PCAPdroid;
import com.emanuelef.remote_capture.R;
import com.emanuelef.remote_capture.Utils;
import com.emanuelef.remote_capture.model.Blacklists;

public class MalwareStatus extends Fragment {
    private Blacklists mBlacklists;
    private TextView mNumMalicious;
    private TextView mNumUpToDate;
    private TextView mNumChecked;
    private TextView mLastUpdate;
    private TextView mDomainRules;
    private TextView mIPRules;
    private int mOkColor, mWarnColor, mDangerColor, mTextColor;

    @Override
    public View onCreateView(LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.malware_detection_status, container, false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        Resources res = view.getContext().getResources();

        mNumMalicious = view.findViewById(R.id.num_malicious);
        mNumUpToDate = view.findViewById(R.id.num_up_to_date);
        mNumChecked = view.findViewById(R.id.num_checked);
        mLastUpdate = view.findViewById(R.id.last_update);
        mDomainRules = view.findViewById(R.id.num_domain_rules);
        mIPRules = view.findViewById(R.id.num_ip_rules);
        mBlacklists = PCAPdroid.getInstance().getBlacklists();
        mOkColor = res.getColor(R.color.ok);
        mWarnColor = res.getColor(R.color.warning);
        mDangerColor = res.getColor(R.color.danger);
        mTextColor = res.getColor(R.color.highContrast);

        updateStatus();
        // TODO refresh when something changes
    }

    private void updateStatus() {
        Context ctx = requireContext();
        ConnectionsRegister reg = CaptureService.getConnsRegister();

        int num_malicious = ((reg != null) ? reg.getNumMaliciousConnections() : 0);
        mNumMalicious.setText(Utils.formatIntShort(num_malicious));
        if(num_malicious > 0)
            mNumMalicious.setTextColor(mDangerColor);
        else
            mNumMalicious.setTextColor(mTextColor);

        mNumUpToDate.setText(String.format(Utils.getPrimaryLocale(ctx), "%d/%d",
                mBlacklists.getNumUpdatedBlacklists(), mBlacklists.getNumBlacklists()));
        if(mBlacklists.getNumUpdatedBlacklists() < mBlacklists.getNumBlacklists())
            mNumUpToDate.setTextColor(mWarnColor);
        else
            mNumUpToDate.setTextColor(mTextColor);

        //mNumChecked
        mLastUpdate.setText(Utils.formatEpochMin(ctx, mBlacklists.getLastUpdate()));
        mDomainRules.setText(Utils.formatIntShort(mBlacklists.getNumLoadedDomainRules()));
        mIPRules.setText(Utils.formatIntShort(mBlacklists.getNumLoadedIPRules()));
    }
}
